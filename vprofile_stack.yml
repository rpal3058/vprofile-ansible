- hosts: localhost
  gather_facts: False
  tasks:
    - name: Importing resource id 
      include_vars: 
        file: ./var/resource_id.yml
        name: resources
    - name: Importing vpc variables 
      include_vars: 
        file: ./var/vpc_variable.yml
        name: VPCvariable    
    - name: Importing vprofile variables 
      include_vars: 
        file: ./var/vprofile_variable.yml
        name: VprofileVariable    

# Getting the ssl certificate 
    - name: getting the ssl certificate we have to access 443 port
      aws_acm_info:
        region: "{{resources.Region}}"
        domain_name: "*.mydevop.co.in"
      register: ACMOut

#Security Group
  # SG for ELB
    - name: create an security group for Load Balancer
      ec2_group:
        name: vprofile-ELB
        description: sg for ELB
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileELB
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80          
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 80        
          - proto: tcp
            from_port: 443
            to_port: 443         
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 443           
      register: ELBSgOut

  # SG for Webserver
    - name: create an security group for Vprofile Stack Webserver
      ec2_group:
        name: vprofileStackWebserver
        description: sg for Vprofile Stack Webserver
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileStackWebserver
        purge_rules: no
        rules:
          - proto: all
            # added this since while accessing the group_id it was getting timed out
            group_id: "{{ELBSgOut.owner_id}}/{{ELBSgOut.group_id}}/{{ELBSgOut.group_name}}"
            rule_desc: allow ssh for bastion 
      register: VprofileSgOutWebserver

  # SG for Backend Server      
    - name: create an security group for Vprofile Stack Backend Server
      ec2_group:
        name: vprofileStackBackend
        description: sg for Vprofile Stack Backend
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileStackBackend
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 3306
            to_port: 3306
            # added the path than just the name of the SG since while accessing the group_id it was getting timed out
            group_id: "{{VprofileSgOutWebserver.owner_id}}/{{VprofileSgOutWebserver.group_id}}/{{VprofileSgOutWebserver.group_name}}"
            rule_desc: allow traffice from the webser to access the  MYSQL       
          - proto: tcp
            from_port: 11211
            to_port: 11211
            # added the path than just the name of the SG since while accessing the group_id it was getting timed out
            group_id: "{{VprofileSgOutWebserver.owner_id}}/{{VprofileSgOutWebserver.group_id}}/{{VprofileSgOutWebserver.group_name}}"
            rule_desc: allow traffice from the webser to access the  MEMCACHE       
          - proto: tcp
            from_port: 5672
            to_port: 5672
            # added the path than just the name of the SG since while accessing the group_id it was getting timed out
            group_id: "{{VprofileSgOutWebserver.owner_id}}/{{VprofileSgOutWebserver.group_id}}/{{VprofileSgOutWebserver.group_name}}"
            rule_desc: allow traffice from the webser to access the RABBITMQ       
      register: VprofileSgOutBackend

    - name: Update the SG for vprofile so that the components within the SG can talk to each other
      ec2_group:
        name: vprofileStack
        description: sg for Vprofile Stack
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileStack
        purge_rules: no 
        rules:
        # in the 'proto' attribute, if you specify  all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
        # traffic on all ports is allowed, regardless of any ports you specify. So the port is not mentioned
          - proto: all
            # added the path than just the name of the SG since while accessing the group_id it was getting timed out
            group_id: "{{VprofileSgOutBackend.owner_id}}/{{VprofileSgOutBackend.group_id}}/{{VprofileSgOutBackend.group_name}}"
            rule_desc: allow traffice from other EC2 instances within the security group

#EC2 instances
# Webserver in each private subnet
    - name: remove key pair by name if it exits
      ec2_key:
        name: vprofile_keypair
        state: absent
        region: "{{resources.Region}}"

    - name: create an key pair using whihc my IP can ssh into the ec2
      ec2_key:
        state: present
        region: "{{resources.Region}}"
        name: vprofile_keypair
      register: keyOut

    - name: create an EC2 instance for the Tomcat webserver in private subnet 1
      ec2:
        region: "{{resources.Region}}"
        key_name: vprofile_keypair
        instance_type: t2.micro
        image: "{{VprofileVariable.webServerAMI}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{VprofileSgOutWebserver.group_id}}"
        vpc_subnet_id: "{{resources.PrivateSubnet1}}"
        instance_tags:
          Name: "vprofile-webserver-instance-1"
          Project: Vprofile
        exact_count: 1
        count_tag: 
          Name: "vprofile-webserver-instance-1"
          Project: Vprofile
        assign_public_ip: yes  
      register: webServerOut1

    # - name: create an EC2 instance for the Tomcat webserver in private subnet 2 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]
    # - name: create an EC2 instance for the Tomcat webserver in private subnet 3 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]

# Backend server in each private subnet
  #MYSQL DB
    - name: create an EC2 instance for the MSQL in private subnet 1
      ec2:
        region: "{{resources.Region}}"
        key_name: vprofile_keypair
        instance_type: t2.micro
        image: "{{VprofileVariable.dbServerAMI}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{VprofileSgOutBackend.group_id}}"
        vpc_subnet_id: "{{resources.PrivateSubnet1}}"
        instance_tags:
          Name: "vprofile-dbserver-instance-1"
          Project: Vprofile
        exact_count: 1
        count_tag: 
          Name: "vprofile-dbserver-instance-1"
          Project: Vprofile
      register: dbServerOut1
    
    # - name: create an EC2 instance for the DB in private subnet 2 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]
    # - name: create an EC2 instance for the DB in private subnet 3 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]

  #MEMCACHE DB
    - name: create an EC2 instance for the MEMCACHE in private subnet 1
      ec2:
        region: "{{resources.Region}}"
        key_name: vprofile_keypair
        instance_type: t2.micro
        image: "{{VprofileVariable.mcServerAMI}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{VprofileSgOutBackend.group_id}}"
        vpc_subnet_id: "{{resources.PrivateSubnet1}}"
        instance_tags:
          Name: "vprofile-mcserver-instance-1"
          Project: Vprofile
        exact_count: 1
        count_tag: 
          Name: "vprofile-mcserver-instance-1"
          Project: Vprofile
      register: mcServerOut1
    
    # - name: create an EC2 instance for the MC in private subnet 2 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]
    # - name: create an EC2 instance for the MC in private subnet 3 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]

  #RABBITMQ DB
    - name: create an EC2 instance for the RABBITMQ in private subnet 1
      ec2:
        region: "{{resources.Region}}"
        key_name: vprofile_keypair
        instance_type: t2.micro
        image: "{{VprofileVariable.rmqServerAMI}}"
        wait: yes
        wait_timeout: 300
        group_id: "{{VprofileSgOutBackend.group_id}}"
        vpc_subnet_id: "{{resources.PrivateSubnet1}}"
        instance_tags:
          Name: "vprofile-rmqserver-instance-1"
          Project: Vprofile
        exact_count: 1
        count_tag: 
          Name: "vprofile-rmqserver-instance-1"
          Project: Vprofile
      register: rmqServerOut1

    - debug:
        msg: "{{webServerOut1.tagged_instances[0].id}}"     
    # - name: create an EC2 instance for the RMQ in private subnet 2 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]
    # - name: create an EC2 instance for the RMQ in private subnet 3 [Not created here but add it if required. Copy from above and make sure to rename vpc_subnet_id, instance_tags, count_tag]

# Load Balancer
    - name: Create a target group with a default health check
      elb_target_group:
        name: vprofileTG
        protocol: http
        port: 8080
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        health_check_protocol: http
        health_check_path: /health_check
        health_check_port: 8080
        successful_response_codes: 200
        health_check_interval: 15
        health_check_timeout: 3
        healthy_threshold_count: 4
        unhealthy_threshold_count: 3
        state: present
        targets:
          - Id: "{{webServerOut1.tagged_instances[0].id}}"
            Port: 8080 #Tomcat server 
        #   # - Id: "{{webServerOut2.instance_ids[0]}}"
          #   Port: 22
          # - Id: "{{webServerOut3.instance_ids[0]}}"
          #   Port: 22
      register: ElbTgOut  

    - name: Creating an Application Load Balancer which will connect to all the private subnet and launch the required resources
      elb_application_lb:
        name: 'VprofileELB'
        region: "{{resources.Region}}"
        security_groups: "{{ELBSgOut.group_id}}"
        subnets: 
          - "{{resources.PublicSubnet1}}"
          - "{{resources.PublicSubnet2}}"
          - "{{resources.PublicSubnet3}}"
        listeners:
          - Protocol: HTTP # The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            Port: 80 #The port on which the load balancer is listening.
            DefaultActions:
              - Type: forward 
                TargetGroupName: "{{ElbTgOut.target_group_name }}"

          - Protocol: HTTPS # The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            Port: 443 #The port on which the load balancer is listening.
            SslPolicy: ELBSecurityPolicy-2016-08   # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
            Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
              - CertificateArn: "{{ACMOut.certificates[0].certificate_arn}}"
            DefaultActions:
              - Type: forward 
                TargetGroupName: "{{ElbTgOut.target_group_name }}"
      register: ElbOut

    - debug:
        msg: "{{ElbOut.load_balancer_arn}}"  

# Creating an inventory file that defines the hosts (i.e managed nodes) and groups of hosts upon which commands, modules, and tasks in a playbook operate
  # Updating the host/inventory file 
    - name: updating host file @ ./hosts/hostFile 
      add_host:
        name: '{{ webServerOut1.tagged_instances[0].private_ip }}'
        groups: [webServer]
      add_host:
        name: '{{ dbServerOut1.tagged_instances[0].private_ip }}'
        groups: [dbServer]
      add_host:
        name: '{{ mcServerOut1.tagged_instances[0].private_ip }}'
        groups: [mcServer]
      add_host:
        name: '{{ rmqServerOut1.tagged_instances[0].private_ip }}'
        groups: [rmqServer]
      add_host:
        name: '{{ ElbOut.load_balancer_arn }}'
        groups: [elb]

