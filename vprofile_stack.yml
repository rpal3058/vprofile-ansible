- hosts: localhost
  gather_facts: False
  tasks:
    - name: Importing resource id 
      include_vars: 
        file: ./var/resource_id.yml
        name: resources
    - name: Importing vpc variables 
      include_vars: 
        file: ./var/vpc_variable.yml
        name: VPCvariable    

# Getting the ssl certificate 
    - name: getting the ssl certificate we have to access 443 port
      aws_acm_info:
        region: "{{resources.Region}}"
        domain_name: "*.mydevop.co.in"
      register: ACMOut
    
    - debug:
        msg: "{{ACMOut}}"  

# Load Balancer
    - name: create an security group for Load Balancer
      ec2_group:
        name: vprofile-ELB
        description: sg for ELB
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileELB
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80          
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 80        
          - proto: tcp
            from_port: 443
            to_port: 443         
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 443           
      register: ELBSgOut

    - name: Create a target group with a default health check
      elb_target_group:
        name: vprofileTG
        region: "{{resources.Region}}"
        protocol: http
        port: 8080
        vpc_id: "{{resources.VPC}}"
        state: present
      register: ElbTgOut  

    # - name: Creating an Application Load Balancer which will connect to all the private subnet and launch the required resources
    - community.aws.elb_application_lb:
        name: 'VprofileELB'
        region: "{{resources.Region}}"
        zones:
          - "{{VPCvariable.az1}}"
          - "{{VPCvariable.az2}}"
          - "{{VPCvariable.az3}}"
        security_groups: "{{ELBSgOut.group_id}}"
        subnets: 
          - "{{resources.PublicSubnet1}}"
          - "{{resources.PublicSubnet2}}"
          - "{{resources.PublicSubnet3}}"
        listeners:
          - Protocol: HTTP # The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            Port: 80 #The port on which the load balancer is listening.
            DefaultActions:
              - Type: forward 
                TargetGroupName: "{{ElbTgOut.target_group_name }}"

          - Protocol: HTTPS # The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
            Port: 443 #The port on which the load balancer is listening.
            SslPolicy: ELBSecurityPolicy-2016-08   # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
            Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
              - CertificateArn: arn:aws:acm:ap-south-1:422709438327:certificate/8314eaea-966f-44d4-a9d8-bf8f4011cd7c
            DefaultActions:
              - Type: forward 
                TargetGroupName: "{{ElbTgOut.target_group_name }}"

# Vprofile Stack
    - name: create an security group for Vprofile Stack
      ec2_group:
        name: vprofileStack
        description: sg for Vprofile Stack
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileStack
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80          
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 80        
          - proto: tcp
            from_port: 443
            to_port: 443         
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 443                       
          - proto: tcp
            from_port: 22
            to_port: 22      
            # added this since while accessing the group_id it was getting timed out
            group_id: "{{resources.BastionSG_accID}}/{{resources.BastionSG_id}}/{{resources.BastionSG_name}}"
            rule_desc: allow ssh for bastion 
      register: VprofileSgOut

    - name: Update the SG for vprofile so that the components within the SG can talk to each other
      ec2_group:
        name: vprofileStack
        description: sg for Vprofile Stack
        vpc_id: "{{resources.VPC}}"
        region: "{{resources.Region}}"
        tags:
          Name: vprofileStack
        purge_rules: no 
        rules:
        # in the 'proto' attribute, if you specify  all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
        # traffic on all ports is allowed, regardless of any ports you specify. So the port is not mentioned
          - proto: all
            # added this since while accessing the group_id it was getting timed out          
            group_id: "{{VprofileSgOut.owner_id}}/{{VprofileSgOut.group_id}}/{{VprofileSgOut.group_name}}"
            rule_desc: allow traffice from other EC2 instances within the security group
            

 