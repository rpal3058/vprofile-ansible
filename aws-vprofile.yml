- hosts: localhost
  gather_facts: False
  tasks:
    - name: Importing vpc variables 
      include_vars: var/vpc_variable.yml

    - name: create a VPC with dedicated tenancy and a couple of tags
      ec2_vpc_net:
        name: "{{vpcName}}"
        cidr_block: "{{vpcCIDR}}"
        region: "{{region}}"
        state: "{{state}}"
        dns_support: yes
        dns_hostnames: yes
      register: vpcOut

    - name: Create public subnet 1 
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pubSub1CIDR}}"
        az: "{{az1}}"
        map_public: yes
        tags:
          Name: Vprofile Public Subnet 1
      register: pubSub1Out  

    - name: Create public subnet 2 
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pubSub2CIDR}}"
        az: "{{az2}}"
        map_public: yes
        tags:
          Name: Vprofile Public Subnet 2
      register: pubSub2Out  
      
    - name: Create public subnet 3 
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pubSub3CIDR}}"
        az: "{{az3}}"
        map_public: yes
        tags:
          Name: Vprofile Public Subnet 3
      register: pubSub3Out  

    - name: Create private subnet 1
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pvtSub1CIDR}}"
        az: "{{az1}}"
        tags:
          Name: Vprofile Private Subnet 1
      register: pvtSub1Out  

    - name: Create private subnet 2
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pvtSub2CIDR}}"
        az: "{{az2}}"
        tags:
          Name: Vprofile Private Subnet 2
      register: pvtSub2Out  

    - name: Create private subnet 3
      ec2_vpc_subnet:
        region: "{{region}}"
        state: "{{state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{pvtSub3CIDR}}"
        az: "{{az3}}"
        tags:
          Name: Vprofile Private Subnet 3
      register: pvtSub3Out  

    - name: Create Internet gateway with tags
      ec2_vpc_igw:
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        tags:
            Name: Vprofile IGW
      register: igwOut  

    - name: Set up public subnet route table 
      ec2_vpc_route_table:
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{region}}"
        resource_tags:
          Name: Vprofile publicRT
        subnets:
          - "{{pubSub1Out.subnet.id}}"
          - "{{pubSub2Out.subnet.id}}"
          - "{{pubSub3Out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igwOut.gateway_id }}"
      register: pubRTOut   
    
    # - name: Create new nat gateway in public subnets
    #   ec2_vpc_nat_gateway:
    #     state: "{{state}}"
    #     subnet_id: "{{pubSub1Out.subnet.id}}"
    #     region: "{{region}}"
    #     if_exist_do_not_create: true
    #     wait: true
    # #   register: natOut

    # - name: Set up private subnet route table to NAT
    #   ec2_vpc_route_table:
    #     vpc_id: "{{vpcOut.vpc.id}}"
    #     region: "{{region}}"
    #     resource_tags:
    #       Name: Vprofile privateRT
    #     subnets:
    #       - "{{pvtSub1Out.subnet.id}}"
    #       - "{{pvtSub2Out.subnet.id}}"
    #       - "{{pvtSub3Out.subnet.id}}"
    #     routes:
    #       - dest: 0.0.0.0/0
    #         gateway_id: "{{ natOut.nat_gateway_id }}"
    #   register: pvtRTOut

    - name: create an security group for the bastion instance to ssh into
      ec2_group:
        name: "{{ sgName }}"
        description: sg for bastion EC2 instance
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: vprofile-bastion
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22          
            cidr_ip: "{{myIP}}"
            rule_desc: allow all on port 80         
      register: sgOut

    - name: create an key pair using whihc my IP can ssh into the ec2
      ec2_key:
        state: "{{state}}"
        region: "{{region}}"
        name: bastion_keypair
      register: keyOut

    - name: create an EC2 instance for the bastion through which myIP can ssh into
      ec2:
        instance_tags:
          Name: vprofile-bastion-instance
        exact_count: 1
        count_tag: 
          Name: "bastion instance"  
        instance_type: t2.micro
        region: "{{region}}"
        image: "{{ami}}"
        key_name: "{{keyOut.key.name}}"
        wait: yes
        group_id: "{{sgOut.group_id}}"
        vpc_subnet_id: "{{pubSub1Out.subnet.id}}"

    - debug:
        var: "{{item}}"
      loop:
        - vpcOut.vpc.id
        - pubSub1Out.subnet.id
        - pubSub2Out.subnet.id
        - pubSub3Out.subnet.id
        - pvtSub3Out.subnet.id
        - pvtSub3Out.subnet.id
        - pvtSub3Out.subnet.id
        - igwOut.gateway_id
        - pubRTOut.route_table.id
        # - natOut.nat_gateway_id 
        # - pvtRTOut.route_table.id

    - name: setting fact for this playbook  
      set_fact:
        vpcID: "{{vpcOut.vpc.id}}"
        pubSub1ID: "{{pubSub1Out.subnet.id}}"
        pubSub2ID: "{{pubSub2Out.subnet.id}}"
        pubSub3ID: "{{pubSub3Out.subnet.id}}"
        pvtSub1ID: "{{pvtSub1Out.subnet.id}}"
        pvtSub2ID: "{{pvtSub2Out.subnet.id}}"
        pvtSub3ID: "{{pvtSub3Out.subnet.id}}"
        igwID: "{{igwOut.gateway_id}}"
        pubRtID: "{{pubRTOut.route_table.id}}"
        # natID:  "{{natOut.nat_gateway_id}}"
        # PvtRtID: "{{pvtRTOut.route_table.id}}"
        cacheable: yes

    - name: copying all the variable to a file
      ansible.builtin.copy:
        # content: "VPC:{{vpcOut.vpc.id}}\nPublicSubnet1:{{pubSub1Out.subnet.id}}\nPublicSubnet2:{{pubSub2Out.subnet.id}}\nPublicSubnet3:{{pubSub3Out.subnet.id}}\nPrivateSubnet1:{{pvtSub1Out.subnet.id}}\nPrivateSubnet2:{{pvtSub2Out.subnet.id}}\nPrivateSubnet3:{{pvtSub3Out.subnet.id}}\nIGW:{{igwOut.gateway_id}}\nPublicRoute:{{pubRTOut.route_table.id}}\nNAT:{{natOut.nat_gateway_id}}\nPrivateRoute:{{pvtRTOut.route_table.id}}"
        content: "VPC:{{vpcOut.vpc.id}}\nPublicSubnet1:{{pubSub1Out.subnet.id}}\nPublicSubnet2:{{pubSub2Out.subnet.id}}\nPublicSubnet3:{{pubSub3Out.subnet.id}}\nPrivateSubnet1:{{pvtSub1Out.subnet.id}}\nPrivateSubnet2:{{pvtSub2Out.subnet.id}}\nPrivateSubnet3:{{pvtSub3Out.subnet.id}}\nIGW:{{igwOut.gateway_id}}\nPublicRoute:{{pubRTOut.route_table.id}}"
        dest: ./details.txt

    - name: copying the private key to ssh into bastion
      ansible.builtin.copy:  
        content: "{{keyOut.key.private_key}}"
        dest: ./bastion_keypair.pem
    
    - name: Changing perm of "/foo/bar.sh", adding "+x"
      file: dest=./bastion_keypair.pem mode=a+rx





