- hosts: localhost
  gather_facts: False
  tasks:
    - name: Importing vpc variables 
      include_vars: 
        file: ./var/vpc_variable.yml
        name: VPCvariable

    - name: create a VPC with dedicated tenancy and a couple of tags
      ec2_vpc_net:
        name: "{{VPCvariable.vpcName}}"
        cidr_block: "{{VPCvariable.vpcCIDR}}"
        region: "{{VPCvariable.region}}"
        state: "{{VPCvariable.state}}"
        dns_support: yes
        dns_hostnames: yes
      register: vpcOut

    - name: Create public subnet 1 
      ec2_vpc_subnet:
        region: "{{VPCvariable.region}}"
        state: "{{VPCvariable.state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{VPCvariable.pubSub1CIDR}}"
        az: "{{VPCvariable.az1}}"
        map_public: yes
        tags:
          Name: Vprofile Public Subnet 1
      register: pubSub1Out  

    # - name: Create public subnet 2 
    #   ec2_vpc_subnet:
    #     region: "{{VPCvariable.region}}"
    #     state: "{{VPCvariable.state}}"
    #     vpc_id: "{{vpcOut.vpc.id}}"
    #     cidr: "{{VPCvariable.pubSub2CIDR}}"
    #     az: "{{VPCvariable.az2}}"
    #     map_public: yes
    #     tags:
    #       Name: Vprofile Public Subnet 2
    #   register: pubSub2Out  
      
    # - name: Create public subnet 3 
    #   ec2_vpc_subnet:
    #     region: "{{VPCvariable.region}}"
    #     state: "{{VPCvariable.state}}"
    #     vpc_id: "{{vpcOut.vpc.id}}"
    #     cidr: "{{VPCvariable.pubSub3CIDR}}"
    #     az: "{{VPCvariable.az3}}"
    #     map_public: yes
    #     tags:
    #       Name: Vprofile Public Subnet 3
    #   register: pubSub3Out  

    - name: Create private subnet 1
      ec2_vpc_subnet:
        region: "{{VPCvariable.region}}"
        state: "{{VPCvariable.state}}"
        vpc_id: "{{vpcOut.vpc.id}}"
        cidr: "{{VPCvariable.pvtSub1CIDR}}"
        az: "{{VPCvariable.az1}}"
        tags:
          Name: Vprofile Private Subnet 1
      register: pvtSub1Out  

    # - name: Create private subnet 2
    #   ec2_vpc_subnet:
    #     region: "{{VPCvariable.region}}"
    #     state: "{{VPCvariable.state}}"
    #     vpc_id: "{{vpcOut.vpc.id}}"
    #     cidr: "{{VPCvariable.pvtSub2CIDR}}"
    #     az: "{{VPCvariable.az2}}"
    #     tags:
    #       Name: Vprofile Private Subnet 2
    #   register: pvtSub2Out  

    # - name: Create private subnet 3
    #   ec2_vpc_subnet:
    #     region: "{{VPCvariable.region}}"
    #     state: "{{VPCvariable.state}}"
    #     vpc_id: "{{vpcOut.vpc.id}}"
    #     cidr: "{{VPCvariable.pvtSub3CIDR}}"
    #     az: "{{VPCvariable.az3}}"
    #     tags:
    #       Name: Vprofile Private Subnet 3
    #   register: pvtSub3Out  

    - name: Create Internet gateway with tags
      ec2_vpc_igw:
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{VPCvariable.region}}"
        state: "{{VPCvariable.state}}"
        tags:
            Name: Vprofile IGW
      register: igwOut  

    # BEGINNING OF NAT SETUP
    - name: create an security group for NAT
      ec2_group:
        name: vprofile-NAT
        description: sg for NAT
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{VPCvariable.region}}"
        tags:
          Name: vprofileNAT
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80          
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 80        
          - proto: tcp
            from_port: 443
            to_port: 443         
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 443           
          - proto: tcp
            from_port: 20
            to_port: 20        
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic from port 443                      
          - proto: icmp
            from_port: -1
            to_port: -1        
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all traffic for ping                       
      register: NATSgOut

    - name: Create EC2 NAT instance
      ec2_instance:
        instance_type: t2.micro
        region: "{{VPCvariable.region}}"
        image_id: "{{VPCvariable.nat}}"
        wait: yes
        vpc_subnet_id: "{{pubSub1Out.subnet.id}}"
        network:
          assign_public_ip: true
          source_dest_check: false  
        security_group: "{{NATSgOut.group_id}}"
        exact_count: 1
        tags:
          Name: Vprofile_NAT
      register: natOut
      
  # END OF NAT SETUP
    - debug:
        msg: "{{natOut.instances}}"
    
    - name: Set up public subnet route table 
      ec2_vpc_route_table:
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{VPCvariable.region}}"
        resource_tags:
          Name: Vprofile publicRT
        subnets:
          - "{{pubSub1Out.subnet.id}}"
          # - "{{pubSub2Out.subnet.id}}"
          # - "{{pubSub3Out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igwOut.gateway_id }}"
      register: pubRTOut   

    - name: Set up private subnet route table associated with each private subnet and routing all traffic to NAT
      community.aws.ec2_vpc_route_table:
        vpc_id: "{{vpcOut.vpc.id}}"
        region: "{{VPCvariable.region}}"
        resource_tags:
          Name: Vprofile privateRT
        subnets:
          - "{{pvtSub1Out.subnet.id}}"
          # - "{{pvtSub2Out.subnet.id}}"
          # - "{{pvtSub3Out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            instance_id: "{{ natOut.tagged_instances[0].id }}"
      register: pvtRTOut
    
    - debug:
        var: "{{item}}"
      loop:
        - vpcOut.vpc.id
        - pubSub1Out.subnet.id
        # - pubSub2Out.subnet.id
        # - pubSub3Out.subnet.id
        - pvtSub1Out.subnet.id
        # - pvtSub2Out.subnet.id
        # - pvtSub3Out.subnet.id
        - igwOut.gateway_id
        - pubRTOut.route_table.id
        - natOut.instance_id
        - pvtRTOut.route_table.id

    - name: setting fact for this playbook  
      set_fact:
        vpcID: "{{vpcOut.vpc.id}}"
        pubSub1ID: "{{pubSub1Out.subnet.id}}"
        # pubSub2ID: "{{pubSub2Out.subnet.id}}"
        # pubSub3ID: "{{pubSub3Out.subnet.id}}"
        pvtSub1ID: "{{pvtSub1Out.subnet.id}}"
        # pvtSub2ID: "{{pvtSub2Out.subnet.id}}"
        # pvtSub3ID: "{{pvtSub3Out.subnet.id}}"
        igwID: "{{igwOut.gateway_id}}"
        pubRtID: "{{pubRTOut.route_table.id}}"
        natID:  "{{natOut.tagged_instances[0].id}}"
        PvtRtID: "{{pvtRTOut.route_table.id}}"
        cacheable: yes
    
    - name: copying all the variable to a file
      ansible.builtin.copy:
        # One subnet 1 has been added
        content: "---\nRegion: {{VPCvariable.region}}\nVPC: {{vpcOut.vpc.id}}\nPublicSubnet1: {{pubSub1Out.subnet.id}}\nPrivateSubnet1: {{pvtSub1Out.subnet.id}}\nIGW: {{igwOut.gateway_id}}\nPublicRoute: {{pubRTOut.route_table.id}}\nnatID: {{natOut.tagged_instances[0].id}}\nPvtRtID: {{pvtRTOut.route_table.id}}"
        # Keeping all the subnet id  
        # content: "---\nRegion: {{VPCvariable.region}}\nVPC: {{vpcOut.vpc.id}}\nPublicSubnet1: {{pubSub1Out.subnet.id}}\nPublicSubnet2: {{pubSub2Out.subnet.id}}\nPublicSubnet3: {{pubSub3Out.subnet.id}}\nPrivateSubnet1: {{pvtSub1Out.subnet.id}}\nPrivateSubnet2: {{pvtSub2Out.subnet.id}}\nPrivateSubnet3: {{pvtSub3Out.subnet.id}}\nIGW: {{igwOut.gateway_id}}\nPublicRoute: {{pubRTOut.route_table.id}}\nnatID: {{natOut.tagged_instances[0].id}}\nPvtRtID: {{pvtRTOut.route_table.id}}"
        dest: ./var/resource_id.yml

    # DUMP
    # - name: Create new nat gateway and allocate new EIP in public subnets if a nat gateway does not yet exist in the subnet.
    #   ec2_vpc_nat_gateway:
    #     state: "{{state}}"
    #     subnet_id: "{{pubSub1Out.subnet.id}}"
    #     region: "{{region}}"
    #     if_exist_do_not_create: true
    #     wait: true
    # #   register: natOut





